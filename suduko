#include<bits/stdc++.h>
using namespace std;

#define unassigned 0
#define n 4
#define sqn 2

bool usedincolumn(int grid[n][n],int col,int num)
{
for(int row=0;row<n;row++)
if(grid[row][col]==num)
return true;
return false;

}

bool usedinrow(int grid[n][n],int row,int num)
{
for(int col=0;col<n;col++)
if(grid[row][col]==num)
return true;
return false;

}

bool usedinbox(int grid[n][n],int boxstartrow,int boxstartcol,int num)
{

for(int row=0;row<sqn;row++)
for(int col=0;col<sqn;col++)
if(grid[row+boxstartrow][col+boxstartcol]==num)
return true;
return false;

}

bool issafe(int grid[n][n],int row,int col,int num)
{
return !usedinrow(grid,row,num) && !usedincolumn(grid,col,num) && !usedinbox(grid,row-row%sqn,col-col%sqn,num);

}


bool findlocation(int grid[n][n],int &row,int &col)
{
  for(row=0;row<n;row++)
  {
   for(col=0;col<n;col++)
   if(grid[row][col]==unassigned)
   return true;
  }
  return false;

}

bool solve(int grid[n][n])
{
int row,col;

if(!findlocation(grid,row,col))
return true;

for(int num=1;num<=n;num++)
{
 if(issafe(grid,row,col,num))
 {
  grid[row][col]=num;
   if(solve(grid))
   return true;
   grid[row][col]=unassigned;
 }
}
return false;

}


void print(int grid[n][n])
{
cout<<"\n\n";
for(int i=0;i<n;i++)
{
for(int j=0;j<n;j++)
cout<<grid[i][j]<<" ";
cout<<"\n";
}
}
int main()
{

int grid[n][n];
cout<<"\nENter elements\n";
for(int i=0;i<n;i++)
for(int j=0;j<n;j++)
cin>>grid[i][j];

if(solve(grid)==true)
print(grid);
else
cout<<"not possible\n";
return 0;

}
